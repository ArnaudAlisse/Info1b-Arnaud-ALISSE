#include "../head/map.h"
#include <stdlib.h>
#include <stdio.h>
#include <math.h> 

Map map = {.map = NULL, .size = 0};

void create_empty_map (Map* map, int size)
{	
	map -> size = size;
	map -> map = malloc(sizeof(Color) * map -> size * map -> size);
	
}


void set_map_value (Map* map, int x, int y, Color value)
{
	map -> map[y * map -> size + x]= value;
}


void fill_map(Map* map)
{
	int n=0;
	Color a = PLAYER_1;
	Color b = PLAYER_2;
	for (int i=0; i < map->size; i = i+1)
	{
		for (int j=0; j< map->size; j=j+1)
		{
			n=rand()%7 + 3;
			set_map_value(map, i, j, n);
		}
	}
	
	set_map_value(map,map->size-1 , 0, a);
	set_map_value(map, 0, map->size-1, b);
}

Color get_map_value (Map* map, int x, int y)
{
	if (map -> map == NULL || x > map -> size || y > map -> size)
	{
		printf("[ERROR] map not big enough or not initialized %p %i access (%i %i)", map -> map, map -> size, x, y);
		return ERROR;
	}
	return map -> map[y * map -> size + x];
}



void affiche_map(Map* map)
{
	for (int i=0; i < map->size; i = i + 1)
	{
		for (int j=0; j < map->size; j = j + 1)
		{
			if (get_map_value(map, i,j) == 1){
			printf ("\033[121;01m1\033[00m");
			}
			if (get_map_value(map, i,j) == 2){
			printf ("\033[120;01m2\033[00m");
			}
			if (get_map_value(map, i,j) == 3){
			printf ("\033[31;01mR\033[00m");
			}
			
			if (get_map_value(map, i,j) == 4){
			printf("\033[32;01mG\033[00m");
			}
			
			if (get_map_value(map, i,j) == 5){
			printf("\033[34;01mB\033[00m");
			}
			
			if (get_map_value(map, i,j) == 6){
			printf("\033[33;01mY\033[00m");
			}
			
			if (get_map_value(map, i,j) == 7){
			printf("\033[35;01mM\033[00m");
			}
			
			if (get_map_value(map, i,j) == 8){
			printf("\033[96;01mC\033[00m");
			}
			
			if (get_map_value(map, i,j) == 9){
			printf("\033[97;01mW\033[00m");
			}
		}
		
		printf("\n");
	}
}


int simule_un_coup (Map * map, int couleur_teste)
{
	Map map2 = map;
	int coup_joue;
	int m=0;
	int compteur = 0;
	coup_joue=couleur_teste;
	
	while (m == 0)
	{
		m=1;
		for (int i = 0; i < map2->size; i = i + 1)
		{
			for (int j = 0; j < map2->size; j = j + 1)
			{
				
				if (get_map_value(map2,i,j) == 2)
				{
					if ((j>0) && (get_map_value(map2,i,j-1) == coup_joue))
					{
						set_map_value (map2, i,j-1, 2);
						m=0;
						compteur = compteur + 1; 
					}	
						
					
					if ((j < map->size - 1) && (get_map_value(map2,i,j+1) == coup_joue))
					{
						set_map_value (map2, i,j+1, 2);
						m=0;
						compteur = compteur + 1; 
					}
							
							
					if ((i>0) && (get_map_value(map2,i-1,j) == coup_joue))
					{
						set_map_value (map2, i-1,j, 2);
						m=0;
						compteur = compteur + 1; 
					}
								
					if ((i<map->size - 1) && (get_map_value(map2,i+1,j) == coup_joue))
					{
						set_map_value (map2, i+1,j, 2);
						m=0;
						compteur = compteur + 1; 
					}
							
					
				}		
			}
		}
	}
	return compteur;
}





int ia_random(Map * map, int numero_joueur)
{
	return rand()%7 + 3;
}


int ia_random_mieux(Map * map, int numero_joueur)
{
	int tab[7];
	int a=0;
	
	for (int k=0; k<7; k=k+1)
	{
		tab[k]=0;
	}
	
	for (int i = 0; i < map->size; i= i + 1)
	{
		for (int j = 0; j < map->size; j = j + 1)
		{
				if (get_map_value(map,i,j) == numero_joueur)
				{
					if ((i>0) && (get_map_value(map,i-1,j) != 1) && (get_map_value(map,i-1,j) !=2 ))
					{
						tab[get_map_value(map,i-1,j) - 3] = get_map_value(map,i-1,j);
						
					}
					
					if ((j>0) && (get_map_value(map,i,j-1) !=1 ) && (get_map_value(map,i,j-1) !=2 ))
					{
						tab[get_map_value(map,i,j-1) - 3] = get_map_value(map,i,j-1);
						
					}
					
					if ((i < map->size - 1) && (get_map_value(map,i+1,j) !=1 ) && (get_map_value(map,i+1,j) !=2 ))
					{
						tab[get_map_value(map,i+1,j) - 3] = get_map_value(map,i+1,j);
						
					}
					
					if ((j < map->size - 1) && (get_map_value(map,i,j+1) !=1 ) && (get_map_value(map,i,j+1) !=2 ))
					{
						tab[get_map_value(map,i,j+1) - 3] = get_map_value(map,i,j+1);
					
					}
				}
		}
	}
	
	
	while(a == 0)
	{
		a = tab[rand()%7];
	}
	return a;
	
}
	
	
	
int ia_glouton(Map * map)
{
	int tab1[7];
	int tab2[7];
	int a = 0;
	int b = 0;


	for (int i = 3; i < 10; i = i + 1)
	{
		tab1[i] = i;
		tab2[i] = 0;
	}

	for (int k = 0; k < 7; k = k + 1)
	{
		tab2[k] = simule_un_coup(map ,tab[k]);
	}

	for (int k = 0; k < 7; k = k + 1)
	{
		if (a < tab2[k])
		{
			a = tab2[k];
			b = k;
		}
	}

	return b + 3;
		
}	
	
	
void joue_un_coup(Map * map, int numero_joueur)
{
	int coup_joue;
	int m=0;

	if (numero_joueur == 1)
	{
		printf("Quel coup voulez vous jouer ?\n");
		scanf("%d",&coup_joue);
	}
	
	else 
	{
		coup_joue=ia_glouton(map);
	}
	
	
	while (m == 0)
	{
		m=1;
		for (int i = 0; i < map->size; i = i + 1)
		{
			for (int j = 0; j < map->size; j = j + 1)
			{
				
				if (get_map_value(map,i,j) == numero_joueur)
				{
					if ((j>0) && (get_map_value(map,i,j-1) == coup_joue))
					{
						set_map_value (map, i,j-1, numero_joueur);
						m=0;
					}	
						
					
					if ((j < map->size - 1) && (get_map_value(map,i,j+1) == coup_joue))
					{
						set_map_value (map, i,j+1, numero_joueur);
						m=0;
					}
							
							
					if ((i>0) && (get_map_value(map,i-1,j) == coup_joue))
					{
						set_map_value (map, i-1,j, numero_joueur);
						m=0;
					}
								
					if ((i<map->size - 1) && (get_map_value(map,i+1,j) == coup_joue))
					{
						set_map_value (map, i+1,j, numero_joueur);
						m=0;
					}
							
					
				}		
			}
		}
	}
	affiche_map(map);
}





int fin_du_jeu(Map * map)
{
	int a = 0;
	int b = 0;
	for (int i = 0; i < map->size; i=i+1)
	{
		for (int j = 0; j<map->size; j=j+1)
		{
			if (get_map_value(map,i,j) == 1)
			{
				a=a+1;
			}
			
			
			if (get_map_value(map,i,j) == 2)
			{
				b=b+1;
			}
		}
	}
	
	
	
	if (a >= floor((map->size * map->size)/2))
	{
		return 1;
	}
	
	
	
	if (b >= floor((map->size * map-> size)/2))
	{
		return 2;
	}
	
	
	return 0;
}
	

void Jouons(Map * map)
{
	int a = 0;
	affiche_map(map);
	while (fin_du_jeu(map)==0)
	{
		if (a % 2 == 0)
		{	
			printf("Joueur 1, à votre tour !\n");
			joue_un_coup(map, 1);
		}
		
		if (a % 2 == 1)
		{
			printf("Joueur 2, à votre tour !\n");
			joue_un_coup(map, 2);
		}
		a = a + 1;
	}		
	
	if (fin_du_jeu(map) == 1)
	{
		printf("Bravo joueur 1, tu as défoncé joueur 2 !!\n");
	}
	
	if (fin_du_jeu(map) == 2)
	{
		printf("Bravo joueur 2, tu as défoncé joueur 1 !!\n");
	}		
}



	 



int main(int argc, char** argv)
{
	create_empty_map(&map, 5);
	fill_map(&map);
	Jouons(&map);
	
}









